terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "4.47.0"
    }
  }
}

provider "aws" {
  region = "us-east-1"
}



data "aws_caller_identity" "current" {}

locals {
  account_id       = data.aws_caller_identity.current.account_id
  eks_cluster_name = "mmp2-cluster"
}

module "mmp2_vpc" {
  source               = "../../../../modules/vpc"
  owner                = var.owner
  resource_name_prefix = "mmp2"
  vpc_name             = var.mmp2_vpc_name
  vpc_cidr             = var.mmp2_vpc_cidr
  public_subnets       = var.mmp2_public_subnets
  private_subnets      = var.mmp2_private_subnets
  private_azs          = var.mmp2_private_azs
  public_azs           = var.mmp2_public_azs
}


resource "aws_subnet" "outpost" {
  count = length(var.outpost_subnets)
  vpc_id = module.mmp2_vpc.vpc_id
  cidr_block = var.outpost_subnets[count.index]
  availability_zone = var.outpost_az

  outpost_arn = var.outpost_arn

  tags = {
    Name = "eulass-outpost"
    Owner = var.owner
  }
}

resource "aws_route_table" "outpost_route_table" {
  vpc_id = module.mmp2_vpc.vpc_id

  tags = {
    Name = "${var.resource_name_prefix}-outpost-route-table"
    Owner = var.owner
  }
}


locals {
  default_tagsss = {
    csp             = "awl"
    cloud_region     = var.region
    created_date     = "7/03/2023"
    created_name = "Raj"
    ecpd_id         = "27115"
    mec_type         = "pvmc"
    resource_type    = "mec"
    location_zipcode = "75071"
    entity_name = "PrivateMecTeam",
    resource_id = "EulessWindowsVM"
  }
  instance_configsami = [
    #/* 
    {
      ami           = var.awsami #"ami-09988af04120b3591" #"ami-01f18be4e32df20e2"
      instance_type = "c6id.4xlarge"
      subnet_id     = "aws_subnet.outpost.*.id" #"subnet-0acc6770b79dde778" #"subnet-0acc6770b79dde778"
      key_name      = "rajutest"
      user_data     = <<EOF
#!/bin/bash
# User data script for instance 2
# Add your user data script here
#sudo /tmp/joinAD_SSM.sh --directory-id d-9067497d5f --directory-name mmp2.vzmec.com --dns-addresses 10.254.0.19 10.254.1.46
sudo yum -y update
sudo mv /etc/dhcp/dhclient-eth1.conf /etc/dhcp/dhclient-eth1.conf.old
sudo touch /etc/dhcp/dhclient-eth1.conf
sudo echo "timeout 300;" >> /etc/dhcp/dhclient-eth1.conf
sudo dhclient 
sudo echo "GATEWAY=10.254.13.1" >> /etc/sysconfig/network
#sudo service network restart
#sudo ip route add 10.246.0.0/20 via 10.128.0.1 dev eth0
#sudo ip route add 10.254.0.0/22 via 10.128.0.1 dev eth0
sudo echo "10.246.0.0/20 via 10.128.0.1 dev eth0" >> /etc/sysconfig/network-scripts/route-eth0
sudo echo "10.254.0.0/20 via 10.128.0.1 dev eth0" >> /etc/sysconfig/network-scripts/route-eth0
sudo service network restart
#sudo ip route replace default via 10.254.13.1 dev eth1 >> /tmp/userdatalog.log
sudo yum install -y awscli
sudo aws s3 cp s3://vzmmp2-outpost-amitest/joinAD_SSM_amazonlinux_v1.sh /tmp/joinAD_SSM_amazonlinux_v1.sh && sudo chmod 755 /tmp/joinAD_SSM_amazonlinux_v1.sh
##sudo /tmp/joinAD_SSM.sh --directory-id ${var.directoryid} --directory-name ${var.directoryname}
sudo /tmp/joinAD_SSM_amazonlinux_v1.sh --directory-id d-9067497d5f --directory-name mmp2.vzmec.com --dns-addresses 10.254.0.19 10.254.1.46 >> /tmp/userdatalos.log
##sudo /usr/bin/sed -i "s/eth0/ens5/g" /tmp/joinAD_SSM.sh
##sudo /tmp/joinAD_SSM.sh --directory-id d-9067497d5f --directory-name mmp2.vzmec.com --dns-addresses 10.254.0.19 10.254.1.46
##/tmp/joinAD_SSM.sh --directory-id d-90674e9d97 --directory-name mmp2.vzmec.com
sudo sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config
##sudo systemctl restart sshd.service
echo "%mmp2vzmec\\linux-sudoers ALL=(ALL:ALL) ALL" >> /etc/sudoers 
##aws s3 cp s3://vzmmp2-outpost-amitest/Crowdstrike/falcon-sensor-6.45.0-14203.amzn2.x86_64.rpm /tmp
#sudo yum install -y /tmp/falcon-sensor-6.45.0-14203.amzn2.x86_64.rpm
#sudo service falcon-sensor start
EOF
    },
    #*/
  ]
}
#/*
# Create the VPC network interface
resource "aws_network_interface" "vpc_interfaceami" {
  count             = length(local.instance_configsami)
  subnet_id         = local.instance_configsami[count.index].subnet_id
  security_groups   = [aws_security_group.instance_sg.id]
  source_dest_check = true
  lifecycle {
    create_before_destroy = true
  }
}

# Create the new network interface
resource "aws_network_interface" "new_interfaceaml" {
  count             = length(local.instance_configsami)
  subnet_id         = local.instance_configsami[count.index].subnet_id
  #security_groups   = count.index % 2 == 0 ? [aws_security_group.instance_sg.id] : [aws_security_group.additional_sg.id]
  security_groups   = [aws_security_group.instance_sg.id]
  source_dest_check = true
  lifecycle {
    create_before_destroy = true
  }
}

# Create the EC2 instances
resource "aws_instance" "ec2_instanceami" {
  count = length(local.instance_configsami)

  ami           = local.instance_configsami[count.index].ami
  instance_type = local.instance_configsami[count.index].instance_type
  key_name      = local.instance_configsami[count.index].key_name
  user_data     = local.instance_configsami[count.index].user_data
  iam_instance_profile  = "PMec-LinuxEC2DomainJoin"
  

  network_interface {
    device_index         = 0
    network_interface_id = aws_network_interface.vpc_interfaceami[count.index].id #"eni-0887e0adf3fdf18ba" #aws_network_interface.vpc_interfaceami.id
  }

  network_interface {
    device_index         = 1
    network_interface_id = aws_network_interface.new_interfaceaml[count.index].id
  }

  tags = {
    Name = "br-ins-aml-${count.index + 1}"
  }
}
#*/
